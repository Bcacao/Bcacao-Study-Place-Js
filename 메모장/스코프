스코프란? = 변수
전역변수 : 프로그램의 전체영역에서 사용가능
지역변수 : 해당 함수 안에서만 사용가능

메모리상
지역변수가 저장되는 영역 엄청 좁다 
객체가 저장되는 영역 넓다
전역변수 저장 영역 좁다
메서드 함수의정의문 저장영역

자바스크립트에서는
변수의 선언을 맨 위로 올린다 
그리고 변수의 선언과 초기화를 동시에 줘도 따로 분리해서
적용시키는것이라서 선언은 맨위로 가고 초기화는 그 위치에 남아 있다

NaN은 무슨 연산을 해도 NAN이다
언디파인이랑 숫자 연산은 NAN이다

변수는 내지역을 우선함

중첩함수
함수 내부에 함수를 만들 수 있다 (헬퍼함수) 
호출이 함수 내부로 제한된다
자바에서는 캡슐화라고 한다
기능을 내부에 숨겨서 개발자 의도되로 하게 한다

전역변수 사용은 최대한 자제해야한다 
이유
의도치 않게 수정이 되면 찾기가 어렵다
너무 오래 살아있어서 메모리 리소스를 오랜시간 가지고 있기 떄문에


==================================================
var 키워드의 문제점
이후로 var 사용 안함 

자바에서는 중복 선언이 되지 않지만
자바스크립트에서는 변경된다 

블록레벨 스코프를 지원하지 않는다 
if나 for나 블록레벨에서의 지역변수가 안되고 전역변수가 된다
var 키워드는 함수에서만 지역변수가 적용된다

변수호이스팅문제 
선언문들 다 위로 올려서 문제가 생김

변수를 만들고 초기화 하는게 맞다 


let을 사용하면 변수 중복 선언했을 경우 에러가남
블록레벨에서의 변수도 지역변수화 된다 

변수 호이스팅 : 변수선언문을 자동으로 맨위로 올림

const만이 가지고 있는것

const는 상수로 사용하기 위한 선언
값의 변경을 불가능하게 만듬 
let과 마찬가지로 블록레벨 스코프를 지원 

let은 선언만 하고 값은 나중에 초기화 해도 되지만 
const는 선언과 동시에 선언 해줘야함

상수는 대문자로 작성
자바에서도 마찬가지
자바에서는 

객체의 불변성
객체는 const로 변경을 막아주는게 좋다 

자바스크립트의 변수선언은 무조건 
const로 한다 
나중에 const로 안되는 부분에서만 let으로 바꿈
var는 금지


